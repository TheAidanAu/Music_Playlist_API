@startuml
/'1. Activity classes '/

class AddSongToPlaylistActivity {
    - playlistDao:PlaylistDao
    - albumTrackDao:AlbumTrackDao

    + AddSongToPlaylistActivity(playlistDao: PlaylistDao,
                                albumTrackDao: AlbumTrackDao)
    + handleRequest(addSongToPlaylistRequest: AddSongToPlaylistRequest,
                    context: Context): AddSongToPlaylistResult
}


class CreatePlaylistActivity {
    - playlistDao: PlaylistDao

    + CreatePlaylistActivity(playlistDao: PlaylistDao)
    + handleRequest(createPlaylistRequest: CreatePlaylistRequest,
                    context: Context): CreatePlaylistResult
}

class GetPlaylistActivity {
    - playlistDao: PlaylistDao

    + GetPlaylistActivity(playlistDao: PlaylistDao)
    + handleRequest(getPlaylistRequest: GetPlaylistRequest,
                    context: Context): GetPlaylistResult
}

class GetPlaylistSongsActivity {
    - playlistDao: PlaylistDao

    + GetPlaylistSongsActivity(playlistDao: PlaylistDao)
    + handleRequest(getPlaylistSongsRequest: GetPlaylistSongsRequest,
                    context: Context): GetPlaylistSongsResult
}

class UpdatePlaylistActivity {
    - playlistDao: PlaylistDao

    + UpdatePlaylistActivity(playlistDao: PlaylistDao)
    + handleRequest(updatePlaylistRequest: UpdatePlaylistRequest,
                    context: Context): UpdatePlaylistResult
}

/'2. DAO Classes '/
class AlbumTrackDao {
    - dynamoDbMapper: DynamoDBMapper

    + AlbumTrackDao(dynamoDbMapper: DynamoDBMapper)
}


class PlaylistDao {
    - dynamoDbMapper: DynamoDBMapper

    + PlaylistDao(dynamoDbMapper: DynamoDBMapper)
    + getPlaylist(id: String): Playlist
}


/'3. Exception Classes '/
class AlbumTrackNotFoundException {
    + AlbumTrackNotFoundException()
    + AlbumTrackNotFoundException(message: String)
    + AlbumTrackNotFoundException(cause: Throwable)
    + AlbumTrackNotFoundException(message: String,
                                 cause: Throwable)
}

class PlaylistNotFoundException {

    + PlaylistNotFoundException()
    + PlaylistNotFoundException(message: String)
    + PlaylistNotFoundException((cause: Throwable)
    + PlaylistNotFoundException(message: String,
                                cause: Throwable)
}

class InvalidAttributeValueException {

    + InvalidAttributeValueException()
    + InvalidAttributeValueException(message: String)
    + InvalidAttributeValueException(cause: Throwable)
    + InvalidAttributeValueException(message: String,
                                    cause: Throwable)
}

class InvalidAttributeChangeException {

    + InvalidAttributeChangeException()
    + InvalidAttributeChangeException(message: String)
    + InvalidAttributeChangeException(cause: Throwable)
    + InvalidAttributeChangeException(message: String,
                                    cause: Throwable)
}

class InvalidAttributeException {

    + InvalidAttributeException()
    + InvalidAttributeException(message: String)
    + InvalidAttributeException(cause: Throwable)
    + InvalidAttributeException(message: String,
                                    cause: Throwable)
}

InvalidAttributeException <|-- InvalidAttributeChangeException
InvalidAttributeException <|-- InvalidAttributeValueException
RuntimeException <|-- InvalidAttributeException

/'
<|-- represents the "is a" relationship or inheritance/generalization.
The arrow points to the superclass or more general class,
and the open angle bracket indicates the subclass or more specialized class.
'/


/'4. DynamoDB Model Classes'/
/'
FIXME
AlbumTrack is missing an expected member variable,
asin, or asin may declared as an incorrect type
==> expected: <true> but was: <false>
'/
class AlbumTrack {
- @DynamoDBHashKey asin : String
- @DynamoDBRangeKey trackNumber :  Integer
- albumName : String
- songTitle : String
}

class Playlist {
    - @DynamoDBHashKey id: String
    - songList: List<AlbumTrack>
    - name: String
    - customerId: String
    - songCount: Integer
    - tags: Set<String>

    + getId(): String
    + setId(id:String)
    + getSongList(): List<AlbumTrack>
    + setSongList(songList: List<AlbumTrack>)
}

/' Relationship '/
Playlist -- AlbumTrack

AddSongToPlaylistActivity -- AlbumTrackDao

PlaylistDao -- CreatePlaylistActivity
PlaylistDao -- AddSongToPlaylistActivity
PlaylistDao -- GetPlaylistActivity
PlaylistDao -- GetPlaylistSongsActivity
PlaylistDao -- UpdatePlaylistActivity


@enduml